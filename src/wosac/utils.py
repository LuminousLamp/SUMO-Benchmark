import math

scenario_total = {
    "training": 486995,
    "validation": 44097,
    "testing": 44920
}

scenario_counts = {
    "training": [492, 514, 516, 475, 522, 488, 558, 439, 497, 502, 489, 483, 468, 467, 501, 486, 500, 517, 495, 483, 489, 450, 476, 510, 484, 522, 473, 455, 464, 481, 479, 487, 515, 495, 487, 492, 500, 523, 446, 491, 463, 496, 497, 540, 518, 507, 491, 496, 508, 447, 502, 483, 483, 501, 489, 473, 472, 457, 505, 503, 484, 488, 519, 502, 483, 476, 512, 517, 490, 500, 521, 470, 473, 487, 511, 438, 496, 526, 487, 513, 517, 517, 448, 487, 506, 464, 465, 475, 527, 487, 480, 492, 502, 498, 490, 479, 454, 485, 482, 475, 534, 506, 474, 488, 516, 485, 490, 476, 490, 495, 487, 488, 507, 489, 463, 480, 478, 457, 458, 475, 486, 473, 500, 465, 508, 471, 528, 503, 482, 471, 473, 493, 509, 431, 498, 496, 472, 475, 484, 477, 464, 450, 478, 466, 540, 496, 549, 452, 522, 456, 522, 499, 451, 482, 485, 512, 503, 517, 500, 505, 509, 471, 470, 496, 486, 516, 483, 518, 514, 462, 471, 531, 500, 483, 487, 486, 497, 478, 520, 480, 484, 450, 512, 478, 473, 516, 525, 517, 508, 499, 471, 497, 485, 485, 492, 500, 491, 488, 431, 496, 494, 483, 508, 439, 485, 477, 495, 458, 534, 485, 472, 492, 465, 465, 468, 464, 527, 471, 500, 463, 502, 487, 461, 486, 498, 482, 522, 477, 491, 480, 504, 494, 467, 485, 484, 496, 476, 496, 516, 506, 516, 510, 497, 457, 460, 508, 468, 498, 479, 503, 469, 508, 490, 514, 480, 516, 445, 486, 500, 464, 491, 492, 475, 494, 486, 481, 499, 442, 464, 476, 501, 455, 494, 511, 524, 497, 496, 488, 547, 462, 520, 472, 507, 500, 470, 489, 478, 475, 505, 529, 489, 512, 469, 504, 504, 436, 453, 457, 520, 466, 499, 463, 506, 469, 494, 501, 498, 502, 468, 497, 465, 502, 458, 490, 516, 514, 487, 505, 495, 443, 491, 480, 477, 493, 486, 492, 452, 501, 465, 487, 492, 504, 507, 459, 485, 491, 439, 504, 511, 502, 482, 530, 498, 482, 494, 522, 487, 442, 489, 493, 498, 453, 510, 459, 511, 521, 489, 476, 489, 485, 463, 507, 513, 507, 468, 469, 487, 465, 500, 513, 464, 470, 467, 469, 450, 475, 501, 476, 509, 509, 478, 467, 476, 453, 477, 502, 521, 494, 481, 528, 472, 499, 512, 496, 507, 503, 477, 511, 498, 480, 496, 471, 465, 499, 493, 516, 496, 453, 477, 477, 499, 444, 490, 467, 510, 480, 490, 507, 497, 482, 463, 469, 496, 448, 516, 468, 477, 497, 494, 477, 486, 489, 470, 449, 490, 509, 514, 465, 480, 450, 482, 465, 470, 491, 515, 457, 475, 526, 492, 480, 513, 501, 543, 456, 494, 513, 474, 477, 517, 491, 451, 482, 501, 486, 474, 483, 481, 456, 514, 526, 456, 497, 477, 443, 491, 463, 475, 513, 464, 494, 480, 477, 505, 490, 477, 470, 499, 497, 473, 445, 478, 478, 505, 485, 461, 497, 493, 492, 494, 449, 453, 490, 505, 536, 501, 460, 496, 506, 476, 523, 479, 524, 516, 513, 469, 492, 485, 457, 456, 464, 495, 464, 500, 473, 488, 465, 494, 474, 512, 452, 480, 475, 500, 482, 469, 459, 433, 488, 500, 506, 495, 481, 534, 466, 487, 461, 519, 496, 486, 487, 463, 449, 500, 467, 497, 505, 466, 474, 515, 476, 471, 507, 465, 507, 507, 494, 477, 480, 490, 450, 482, 486, 441, 468, 505, 492, 488, 500, 474, 485, 503, 482, 491, 520, 469, 504, 458, 446, 482, 510, 488, 487, 508, 509, 504, 498, 498, 473, 501, 489, 472, 510, 500, 504, 489, 469, 518, 481, 466, 472, 495, 476, 460, 475, 478, 480, 459, 543, 499, 546, 470, 446, 458, 488, 511, 484, 489, 467, 457, 519, 460, 506, 451, 509, 509, 487, 458, 516, 480, 474, 498, 482, 460, 465, 494, 477, 486, 470, 492, 475, 500, 528, 499, 443, 471, 470, 471, 480, 459, 491, 486, 512, 483, 485, 489, 503, 446, 464, 482, 477, 497, 507, 497, 472, 464, 464, 481, 463, 484, 447, 477, 468, 492, 522, 470, 492, 529, 454, 514, 469, 499, 499, 455, 501, 462, 495, 500, 475, 469, 504, 472, 480, 468, 486, 477, 536, 475, 494, 475, 486, 518, 515, 521, 506, 487, 477, 481, 482, 484, 463, 518, 467, 499, 483, 445, 503, 492, 458, 485, 500, 506, 479, 497, 515, 488, 517, 496, 488, 464, 470, 480, 452, 481, 521, 516, 482, 468, 506, 465, 468, 447, 451, 458, 485, 475, 505, 507, 474, 496, 442, 459, 520, 467, 522, 467, 471, 471, 468, 475, 487, 519, 517, 508, 497, 472, 513, 459, 472, 499, 508, 517, 491, 521, 472, 464, 470, 452, 487, 521, 487, 496, 431, 465, 485, 490, 489, 493, 456, 520, 452, 473, 473, 458, 446, 528, 509, 509, 520, 504, 478, 509, 461, 471, 516, 481, 512, 491, 489, 526, 476, 464, 531, 445, 505, 519, 489, 464, 498, 491, 479, 470, 534, 470, 517, 498, 462, 491, 490, 509, 488, 471, 465, 460, 467, 441, 481, 497, 517, 476, 480, 488, 484, 479, 442, 479, 504, 477, 518, 500, 496, 456, 515, 436, 489, 468, 486, 489, 523, 492, 510, 481, 488, 517, 484, 505, 438, 431, 466, 526, 501, 467, 509, 521, 470, 506, 466, 456, 452, 503, 509, 506, 504, 504, 485, 488, 441, 490, 510, 459, 469, 499, 488, 503, 456, 483, 507, 487, 474, 466, 477, 504, 503, 465, 485, 429, 487, 449, 491, 492, 495, 541, 519, 560, 539, 485, 537, 487, 512, 484, 442, 462, 488, 478, 518, 516, 475, 481, 495, 453, 484, 471, 509, 481, 510, 464, 504, 504, 490, 485, 508, 482, 512, 522, 504, 444, 507, 504, 475, 482, 510, 497, 491, 460, 483, 463, 479, 466, 483, 456, 500, 479, 479, 505, 504, 464, 525, 489, 478, 457, 515, 470, 490, 491, 499, 472, 485, 520, 448, 463, 495, 499, 452, 512, 481, 457, 462, 498, 460, 472, 486],
    "validation": [
    287, 286, 290, 288, 314, 294, 273, 289, 309, 278, 274, 293, 314, 289, 295, 289, 
    279, 292, 293, 313, 279, 297, 286, 316, 291, 280, 280, 305, 264, 293, 273, 293, 
    289, 301, 289, 309, 302, 293, 298, 309, 280, 281, 312, 298, 287, 280, 315, 295, 
    255, 329, 296, 277, 302, 302, 291, 277, 327, 285, 288, 289, 289, 298, 282, 282, 
    283, 328, 280, 309, 304, 296, 289, 260, 265, 304, 286, 284, 292, 297, 318, 284, 
    311, 316, 286, 290, 302, 293, 297, 293, 295, 314, 310, 332, 323, 304, 311, 292, 
    316, 311, 260, 301, 295, 298, 277, 286, 289, 296, 286, 304, 310, 297, 295, 286, 
    277, 287, 289, 276, 309, 316, 279, 292, 317, 282, 283, 306, 334, 293, 303, 289, 
    268, 270, 264, 291, 304, 302, 282, 294, 297, 288, 284, 288, 292, 297, 290, 297, 
    301, 288, 297, 303, 280, 330
],
    "testing": [
    307, 320, 288, 313, 268, 340, 304, 295, 285, 290, 313, 262, 307, 285, 287, 319, 
    307, 301, 281, 293, 298, 294, 294, 290, 295, 313, 296, 300, 313, 300, 281, 298, 
    294, 321, 296, 291, 302, 308, 315, 305, 289, 297, 275, 322, 315, 314, 326, 291, 
    312, 308, 276, 293, 317, 295, 347, 298, 302, 310, 264, 274, 295, 277, 299, 289, 
    298, 291, 308, 311, 336, 307, 289, 325, 319, 271, 341, 343, 302, 301, 294, 297, 
    312, 305, 290, 319, 301, 326, 263, 291, 291, 278, 293, 288, 295, 298, 285, 302, 
    326, 326, 291, 274, 293, 330, 297, 323, 271, 282, 291, 312, 294, 289, 305, 313, 
    291, 277, 278, 293, 316, 297, 320, 264, 288, 269, 309, 316, 300, 283, 302, 301, 
    298, 289, 316, 279, 325, 299, 320, 299, 261, 297, 319, 321, 305, 278, 330, 295, 
    305, 282, 276, 300, 282, 299
]
}


def map_batchidx_to_glblindices(dataset_type: str, batch_idx: int, num_batch: int = 5000) -> list[int]:

    if not (0 <= batch_idx < num_batch):
        raise ValueError("there must be 0 <= batch_idx < num_batch")

    numbers_per_input = scenario_total[dataset_type] / num_batch
    start = math.floor(batch_idx * numbers_per_input)
    end = math.floor((batch_idx + 1) * numbers_per_input) - 1

    return list(range(start, end + 1))


def reverse_glblindex_to_batchidx(dataset_type: str, global_index: int, num_batch: int = 5000) -> int:
    if not (0 <= global_index <= scenario_total[dataset_type]):
        raise ValueError("global index out of range")
    
    for input_num in range(num_batch):
        mapped_range = map_batchidx_to_glblindices(input_num)
        if global_index in mapped_range:
            return input_num
    
    raise ValueError("the corresponding batch index not found")


def map_glblidx_to_localidx(dataset_type: str, global_idx: int) -> tuple[int, int]:
    if dataset_type not in scenario_total.keys():
        raise ValueError()
    scenario_count = scenario_counts[dataset_type]

    file_number = -1
    scenario_sum = 0
    while scenario_sum <= global_idx and file_number < len(scenario_count):
        file_number += 1
        scenario_sum += scenario_count[file_number]

    assert file_number < len(scenario_count)
    local_idx = global_idx - (scenario_sum - scenario_count[file_number])

    return (file_number, local_idx)

def get_default_filename(dataset_type: str, shard_index: int) -> str:
    num_shards = len(scenario_counts[dataset_type])
    return f"{dataset_type}.tfrecord-{shard_index:05d}-of-{num_shards:05d}"
